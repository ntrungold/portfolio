{"version":3,"sources":["components/ControlPanel.tsx","utilities/data.ts","components/SetViewer.tsx","components/GameBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","setSet","Col","ButtonGroup","Button","onClick","items","SETS","Math","floor","random","length","variant","SetViewer","set","Alert","Heading","question","GameBoard","answerRevealed","reveal","Table","bordered","a1","App","useState","activeSet","setActiveSet","Container","className","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+0BAMO,SAASA,EAAT,GAAwE,IAAjDC,EAAgD,EAAhDA,OAM1B,OAAO,cAACC,EAAA,EAAD,UAEP,eAACC,EAAA,EAAD,CAAa,aAAW,aAAxB,UACI,cAACC,EAAA,EAAD,CAAQC,QARZ,WCLG,IAA6BC,EDM5BL,GCN4BK,EDMJC,GCLfC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,WDYxC,sBACA,cAACP,EAAA,EAAD,CAAQQ,QAAQ,YAAhB,8B,YEdD,SAASC,EAAT,GACuB,IADHC,EACE,EADFA,IAEvB,OAAO,cAACZ,EAAA,EAAD,UACP,eAACa,EAAA,EAAD,CAAOH,QAAQ,UAAf,UACI,cAACG,EAAA,EAAMC,QAAP,mCACA,4BACKF,EAAIG,gB,YCNV,SAASC,EAAT,GAC2E,IADvDJ,EACsD,EADtDA,IAAKK,EACiD,EADjDA,eAAgBC,EACiC,EADjCA,OAExC,OAAO,cAACC,EAAA,EAAD,CAAOC,UAAQ,EAAf,SACH,kCACI,+BACI,6BAAI,cAAClB,EAAA,EAAD,CAAQC,QAAS,kBAAMe,GAAQD,IAA/B,SAAiDA,GAAkBL,EAAIS,OAC3E,sCAEJ,+BACI,mCACA,sCAEJ,+BACI,mCACA,sCAEJ,+BACI,mCACA,2C,0BCYLC,MArBf,WACE,MAAkCC,mBAAclB,EAAK,IAArD,mBAAOmB,EAAP,KAAkBC,EAAlB,KACA,EAAiCF,oBAAkB,GAAnD,mBAAON,EAAP,KAAuBC,EAAvB,KAEA,OACE,eAACQ,EAAA,EAAD,CAAWC,UAAU,MAArB,UACE,cAACC,EAAA,EAAD,UACE,+DAEF,eAACA,EAAA,EAAD,WACE,cAAC9B,EAAD,CAAcC,OAAQ0B,IACtB,cAACd,EAAD,CAAWC,IAAKY,OAElB,cAACI,EAAA,EAAD,UACE,cAACZ,EAAD,CAAWJ,IAAKY,EAAWN,OAAQA,EAAQD,eAAiBA,UCXrDY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08a961d8.chunk.js","sourcesContent":["import { Button, ButtonGroup, Col } from 'react-bootstrap';\r\nimport {Set} from '../interfaces/set';\r\nimport SETS from '../assets/q-sets.json'\r\nimport { getRandomElement } from '../utilities/data';\r\n\r\n\r\nexport function ControlPanel({setSet}: {setSet: (s: Set)=>void}): JSX.Element {\r\n    function setRandomSet() {\r\n        setSet(getRandomElement(SETS as Set[]))\r\n    }\r\n    \r\n    \r\n    return <Col>\r\n    \r\n    <ButtonGroup aria-label=\"Button Set\">\r\n        <Button onClick={setRandomSet}>New Game</Button>\r\n        <Button variant=\"secondary\">How to Play</Button>\r\n    </ButtonGroup>\r\n    </Col>\r\n}","//from the stack page professor Bart used in his TA trainer tutorial\r\n//returns one random element\r\nexport function getRandomElement<T>(items: T[]): T{\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}","import {Col, Alert} from 'react-bootstrap'\r\nimport {Set} from '../interfaces/set'\r\nexport function SetViewer({set}: \r\n    {set: Set}): JSX.Element {\r\n    return <Col>\r\n    <Alert variant=\"primary\">\r\n        <Alert.Heading>We asked 100 people:</Alert.Heading>\r\n        <p>\r\n            {set.question}\r\n        </p>\r\n    </Alert>\r\n    </Col>\r\n}","import {Table, Button} from 'react-bootstrap'\r\nimport {Set} from '../interfaces/set'\r\nexport function GameBoard({set, answerRevealed, reveal}: \r\n    {set: Set,answerRevealed: boolean, reveal: (r:boolean) =>void}): JSX.Element {\r\n        return <Table bordered>\r\n            <tbody>\r\n                <tr>\r\n                    <td><Button onClick={() => reveal(!answerRevealed)}>{answerRevealed && set.a1}</Button></td>\r\n                    <td>5</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>6</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>3</td>\r\n                    <td>7</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>4</td>\r\n                    <td>8</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    }","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport SETS from './assets/q-sets.json';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport { SetViewer } from './components/SetViewer';\r\nimport {GameBoard} from './components/GameBoard'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container, Row} from 'react-bootstrap';\r\nimport {Set} from './interfaces/set';\r\n\r\n\r\nfunction App(): JSX.Element {\r\n  const [activeSet, setActiveSet] = useState<Set>(SETS[0] as Set);\r\n  const [answerRevealed, reveal] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row>\r\n        <strong>Let's Play Family Feud!</strong>\r\n      </Row> \r\n      <Row>\r\n        <ControlPanel setSet={setActiveSet}></ControlPanel>\r\n        <SetViewer set={activeSet}></SetViewer>\r\n      </Row>\r\n      <Row>\r\n        <GameBoard set={activeSet} reveal={reveal} answerRevealed= {answerRevealed}></GameBoard>\r\n      </Row>\r\n        \r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}